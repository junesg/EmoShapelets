
///////////////////////////////////////////////////////////////////////////////////////
///////// > openSMILE configuration file for local emotion features <//////////////////
/////////   Feature set of the INTERSPEECH 2009 Emotion Challenge    //////////////////
/////////        features, (  LLD +    delta)*   functionals         //////////////////
/////////                                                            //////////////////
/////////  * written 2014 by June Yuan Shangguan                     //////////////////
/////////                                                            //////////////////
///////// Modified on top of the emo_IS09.conf and emobase.conf      //////////////////
///////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////////
;
; This section is always required in openSMILE configuration files
;   it configures the componentManager and gives a list of all components which are to be loaded
; The order in which the components are listed should match 
;   the order of the data flow for most efficient processing
;
///////////////////////////////////////////////////////////////////////////////////////
[componentInstances:cComponentManager]
instance[dataMemory].type=cDataMemory
instance[waveIn].type=cWaveSource
instance[int].type=cIntensity    
;addition from prosody
instance[fr1].type=cFramer
instance[pe2].type=cVectorPreemphasis
instance[w1].type=cWindower
instance[fft1].type=cTransformFFT
instance[fftmp1].type=cFFTmagphase
instance[mspec].type=cMelspec
instance[mfcc].type=cMfcc
instance[mzcr].type=cMZcr
instance[acf].type=cAcf
instance[cepstrum].type=cAcf
instance[pitchACF].type=cPitchACF
instance[energy].type=cEnergy
instance[lpc].type = cLpc
instance[lsp].type = cLsp
instance[vad].type = cVadV1
instance[spectral].type=cSpectral
instance[volmerge].type = cValbasedSelector

;instance[delta1].type=cDeltaRegression
;instance[delta2].type=cDeltaRegression
;instance[functL1].type=cFunctionals
instance[lld].type=cContourSmoother
instance[delta1].type=cDeltaRegression
instance[functL1].type=cFunctionals

instance[csvSink].type=cCsvSink
printLevelStats=0
nThreads=1


/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////   component configuration  ////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
; the following sections configure the components listed above
; a help on configuration parameters can be obtained with
;  SMILExtract -H
; or
;  SMILExtract -H configTypeName (= componentTypeName)
/////////////////////////////////////////////////////////////////////////////////////////////
[waveIn:cWaveSource]
writer.dmLevel=wave
filename=\cm[inputfile(I){test.wav}:name of input file]
monoMixdown=1

;Where the framesize is changed from the origianl value

[fr1:cFramer]
reader.dmLevel=wave
writer.dmLevel=frames
noPostEOIprocessing = 1
copyInputName = 1
;frameSize = 0.0250
;frameStep = 0.010
frameMode = fixed
;frameCenterSpecial = 0
;buffersize = 1000
frameSize = 0.0250
frameStep = 0.010
frameCenterSpecial = left


;addition from prosody
[int:cIntensity]
reader.dmLevel = frames
writer.dmLevel = intens
// nameAppend =
copyInputName = 1
processArrayFields = 1
intensity = 0
loudness = 1



[pe2:cVectorPreemphasis]
reader.dmLevel=frames
writer.dmLevel=framespe
copyInputName = 1 
;addition
processArrayFields = 1  
;addition
k = 0.97
de = 0

[w1:cWindower]
reader.dmLevel=framespe
writer.dmLevel=winframe
copyInputName = 1
processArrayFields = 1
winFunc = ham
gain = 1.0
offset = 0





  // ---- LLD -----

[fft1:cTransformFFT]
reader.dmLevel=winframe
writer.dmLevel=fftc
copyInputName = 1
processArrayFields = 1
inverse = 0

[fftmp1:cFFTmagphase]
reader.dmLevel=fftc
writer.dmLevel=fftmag
copyInputName = 1
processArrayFields = 1
inverse = 0
magnitude = 1
phase = 0

[mspec:cMelspec]
nameAppend=melspec
reader.dmLevel=fftmag
writer.dmLevel=mspec1
copyInputName = 1
processArrayFields = 1
htkcompatible = 1
usePower = 0
nBands = 26
lofreq = 0
hifreq = 8000
usePower = 0
inverse = 0
specScale = mel

[mfcc:cMfcc]
reader.dmLevel=mspec1
writer.dmLevel=mfcc1
copyInputName = 1
processArrayFields = 1
firstMfcc = 0
lastMfcc =  12
cepLifter = 22.0
htkcompatible = 1


[acf:cAcf]
reader.dmLevel=fftmag
writer.dmLevel=acf
nameAppend = acf
copyInputName = 1
processArrayFields = 1
usePower = 1
cepstrum = 0

[cepstrum:cAcf]
reader.dmLevel=fftmag
writer.dmLevel=cepstrum
nameAppend = acf
copyInputName = 1
processArrayFields = 1
usePower = 1
cepstrum = 1

[pitchACF:cPitchACF]
  ; the pitchACF component must ALWAYS read from acf AND cepstrum in the given order!
reader.dmLevel=acf;cepstrum
writer.dmLevel=pitch
copyInputName = 1
processArrayFields = 0
maxPitch = 500
voiceProb = 1
voiceQual = 0
HNR = 0
F0 = 1
F0raw = 0
F0env = 1
voicingCutoff = 0.550000

[energy:cEnergy]
reader.dmLevel=winframe
writer.dmLevel=energy
nameAppend=energy
copyInputName = 1
processArrayFields = 0
htkcompatible = 0
rms=0
log=1

[lpc:cLpc]
reader.dmLevel=winframe
saveRefCoeff=0
writer.dmLevel=lpc
p=10


[lsp:cLsp]
reader.dmLevel=lpc
writer.dmLevel=lsp

[vad:cVadV1]
reader.dmLevel=mspec1;lsp;energy
writer.dmLevel=vad11
writer.levelconf.noHang=1
debug=\cm[vaddebug{0}:1= debug vad]

[mzcr:cMZcr]
reader.dmLevel=frames
writer.dmLevel=mzcr
copyInputName = 1
processArrayFields = 1
zcr = 1
amax = 0
mcr = 0
maxmin = 0
dc = 0

[spectral:cSpectral]
reader.dmLevel=fftmag
writer.dmLevel=spectral
copyInputName = 1
processArrayFields = 1
squareInput = 1
bands[0]=0-250
bands[1]=0-650
bands[2]=250-650
bands[3]=1000-4000
bands[4]=3010-9123
rollOff[0] = 0.25
rollOff[1] = 0.50
rollOff[2] = 0.75
rollOff[3] = 0.90
flux = 1
centroid = 1
maxPos = 1
minPos = 1
entropy = 0



[volmerge:cValbasedSelector]
reader.dmLevel = vad11;energy;mfcc1;mspec1;mzcr;pitch;spectral;intens;
writer.dmLevel = volmerge
idx=2  
;using vadSmo as a threshold, and get non-zeros
threshold=0
removeIdx=0
invert = 0



///////////////------NOW DO LLD and func-------/////////////


;add intens to ContourSmoother
[lld:cContourSmoother]
reader.dmLevel=vad11;energy;mfcc1;mspec1;mzcr;pitch;spectral;intens;
writer.dmLevel=lld
writer.levelconf.nT=10
;writer.levelconf.noHang=2
writer.levelconf.isRb=0
writer.levelconf.growDyn=1
;processArrayFields=0
nameAppend = sma
copyInputName = 1
noPostEOIprocessing = 0
smaWin = 3


  // ---- delta regression of LLD ----

[delta1:cDeltaRegression]
reader.dmLevel=lld
writer.dmLevel=lld_de
writer.levelconf.isRb=0
writer.levelconf.growDyn=1
nameAppend = de
copyInputName = 1
noPostEOIprocessing = 0
deltawin=2
blocksize=1



[functL1:cFunctionals]
reader.dmLevel=lld;lld_de
writer.dmLevel=func
copyInputName = 1
;frameMode = full
 ; frameSize and frameStep = 0 => functionals over complete input
 ; (NOTE: buffersize of lld and lld_de levels must be large enough!!)
frameSize = 1.0
frameStep = 0.1
frameMode = fixed
frameCenterSpecial = left
noPostEOIprocessing = 0
functionalsEnabled=Extremes;Regression;Moments;Crossings;Peaks
Extremes.max = 1
Extremes.min = 1
Extremes.range = 1
Extremes.maxpos = 1
Extremes.minpos = 1
Extremes.amean = 0
Extremes.maxameandist = 0
Extremes.minameandist = 0
Extremes.norm = frame
Regression.linregc1 = 1
Regression.linregc2 = 1
Regression.linregerrA = 0
Regression.linregerrQ = 1
Regression.qregc1 = 0
Regression.qregc2 = 0
Regression.qregc3 = 0
Regression.qregerrA = 0
Regression.qregerrQ = 0
Regression.centroid = 0
Moments.variance = 0
Moments.stddev = 1
Moments.skewness = 1
Moments.kurtosis = 1
Moments.amean = 0
Crossings.zcr = 1
Crossings.mcr = 0
Crossings.amean = 0
Peaks.numPeaks = 1
Peaks.meanPeakDist = 0
Peaks.peakMean = 1
Peaks.peakMeanMeanDist = 0
Peaks.overlapFlag = 1




  //////////////////////////////////////////////////////////////////////
 ///////////////////  data output configuration  //////////////////////
//////////////////////////////////////////////////////////////////////

// ----- you might need to customise the arff output to suit your needs: ------

//CSV -----CSV output ---
[csvSink:cCsvSink]
reader.dmLevel=func
;vad11;energy;mfcc1;mspec1;mzcr;pitch;spectral;intens
;vad11;energy;mfcc1;mspec1;mzcr;pitch;spectral;intens
filename=\cm[arffout(O){output.csv}:name of WEKA Arff output file]
 ; name of @relation in the ARFF file
delimChar=,

//////---------------------- END -------------------------///////



//////---------------------- END -------------------------///////


